#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5  // Define the maximum size of the queue

// Queue structure
struct Queue {
    int arr[MAX_SIZE];
    int front;
    int rear;
};

// Function to initialize the queue
void initialize(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is full
int isFull(struct Queue* q) {
    return (q->rear == MAX_SIZE - 1);
}

// Function to check if the queue is empty
int isEmpty(struct Queue* q) {
    return (q->front == -1 || q->front > q->rear);
}

// Function to enqueue an element
void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue Overflow: Cannot enqueue %d\n", value);
        return;
    }
    if (q->front == -1) {
        q->front = 0;  // First element enqueued
    }
    q->arr[++(q->rear)] = value;
    printf("Enqueued: %d\n", value);
}

// Function to dequeue an element
int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue Underflow: Cannot dequeue\n");
        return -1;
    }
    int value = q->arr[q->front++];
    if (q->front > q->rear) {  // Reset queue after last dequeue
        q->front = q->rear = -1;
    }
    printf("Dequeued: %d\n", value);
    return value;
}

// Function to display the queue elements
void display(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return;
    }
    printf("Queue elements: ");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->arr[i]);
    }
    printf("\n");
}

int main() {
    struct Queue q;
    initialize(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    display(&q);

    dequeue(&q);
    display(&q);

    enqueue(&q, 40);
    enqueue(&q, 50);
    enqueue(&q, 60);  // This will cause overflow
    display(&q);

    return 0;
}
