#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Hash table array
int hashTable[TABLE_SIZE];

// Hash function to calculate index
int hash(int key) {
    return key % TABLE_SIZE;
}

// Function to insert a key into the hash table
void insert(int key) {
    int index = hash(key);
    int i = 0;

    // Linear probing to find an empty slot
    while (hashTable[(index + i) % TABLE_SIZE] != -1) {
        i++;
        if (i == TABLE_SIZE) {
            printf("Hash table is full. Cannot insert %d\n", key);
            return;
        }
    }

    // Insert the key
    hashTable[(index + i) % TABLE_SIZE] = key;
    printf("Inserted %d at index %d\n", key, (index + i) % TABLE_SIZE);
}

// Function to search for a key in the hash table
int search(int key) {
    int index = hash(key);
    int i = 0;

    // Linear probing to find the key
    while (hashTable[(index + i) % TABLE_SIZE] != -1) {
        if (hashTable[(index + i) % TABLE_SIZE] == key) {
            return (index + i) % TABLE_SIZE;
        }
        i++;
        if (i == TABLE_SIZE) {
            break;
        }
    }
    return -1; // Key not found
}

// Function to display the hash table
void display() {
    printf("Hash Table:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable[i] != -1) {
            printf("Index %d: %d\n", i, hashTable[i]);
        } else {
            printf("Index %d: Empty\n", i);
        }
    }
}

int main() {
    // Initialize hash table with -1 (empty slots)
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i] = -1;
    }

    // Insert keys into the hash table
    insert(10);
    insert(20);
    insert(30);
    insert(40);
    insert(50);

    // Display the hash table
    display();

    // Search for a key
    int key = 30;
    int index = search(key);
    if (index != -1) {
        printf("Key %d found at index %d\n", key, index);
    } else {
        printf("Key %d not found in the hash table\n", key);
    }

    return 0;
}
