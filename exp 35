#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge with source, destination, and weight
typedef struct {
    int src, dest, weight;
} Edge;

// Structure to represent a graph with vertices, edges, and an array of edges
typedef struct {
    int V, E;
    Edge* edges;
} Graph;

// Structure to represent a disjoint set (Union-Find) with parent and rank
typedef struct {
    int* parent;
    int* rank;
} DisjointSet;

// Function to create a new graph with V vertices and E edges
Graph* createGraph(int V, int E) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->V = V;
    graph->E = E;
    graph->edges = (Edge*)malloc(E * sizeof(Edge));
    return graph;
}

// Function to create a new disjoint set with V elements
DisjointSet* createSet(int V) {
    DisjointSet* set = (DisjointSet*)malloc(sizeof(DisjointSet));
    set->parent = (int*)malloc(V * sizeof(int));
    set->rank = (int*)malloc(V * sizeof(int));
    for (int i = 0; i < V; i++) {
        set->parent[i] = i;
        set->rank[i] = 0;
    }
    return set;
}

// Function to find the parent of a node with path compression
int find(DisjointSet* set, int i) {
    if (set->parent[i] != i)
        set->parent[i] = find(set, set->parent[i]);
    return set->parent[i];
}

// Function to perform union of two subsets by rank
void unionSets(DisjointSet* set, int x, int y) {
    int xroot = find(set, x);
    int yroot = find(set, y);

    if (xroot != yroot) {
        if (set->rank[xroot] < set->rank[yroot])
            set->parent[xroot] = yroot;
        else if (set->rank[xroot] > set->rank[yroot])
            set->parent[yroot] = xroot;
        else {
            set->parent[yroot] = xroot;
            set->rank[xroot]++;
        }
    }
}

// Comparator function to sort edges based on their weight
int compareEdges(const void* a, const void* b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

// Function to find the MST using Kruskal's algorithm
int kruskalMST(Graph* graph) {
    int mstWeight = 0;
    DisjointSet* set = createSet(graph->V);

    // Sort all edges in non-decreasing order of their weight
    qsort(graph->edges, graph->E, sizeof(Edge), compareEdges);

    printf("Edges in MST:\n");

    for (int i = 0; i < graph->E; i++) {
        int u = graph->edges[i].src;
        int v = graph->edges[i].dest;
        int w = graph->edges[i].weight;

        // Find the parents of the vertices u and v
        int x = find(set, u);
        int y = find(set, v);

        // If including this edge does not cause a cycle
        if (x != y) {
            printf("%d -- %d == %d\n", u, v, w);
            mstWeight += w;
            unionSets(set, x, y);
        }
    }

    free(set->parent);
    free(set->rank);
    free(set);

    return mstWeight;
}

int main() {
    int V = 4; // Number of vertices
    int E = 5; // Number of edges

    // Create a graph with V vertices and E edges
    Graph* graph = createGraph(V, E);

    // Add edges to the graph
    graph->edges[0].src = 0; graph->edges[0].dest = 1; graph->edges[0].weight = 10;
    graph->edges[1].src = 0; graph->edges[1].dest = 2; graph->edges[1].weight = 6;
    graph->edges[2].src = 0; graph->edges[2].dest = 3; graph->edges[2].weight = 5;
    graph->edges[3].src = 1; graph->edges[3].dest = 3; graph->edges[3].weight = 15;
    graph->edges[4].src = 2; graph->edges[4].dest = 3; graph->edges[4].weight = 4;

    // Find the MST and print the total weight
    int mstWeight = kruskalMST(graph);
    printf("\nWeight of MST: %d\n", mstWeight);

    free(graph->edges);
    free(graph);

    return 0;
}
